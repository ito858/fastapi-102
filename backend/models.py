from sqlalchemy import create_engine, Column, Integer, String, Boolean, DECIMAL, LargeBinary, DateTime
from sqlalchemy.sql import func
from database import Base
from datetime import datetime, timedelta # Import for default value
from pydantic import BaseModel, ConfigDict, Field
from typing import Optional
import decimal

# SQLAlchemy Models
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, nullable=False)
    password = Column(String(255), nullable=False)

class BlacklistedToken(Base):
    __tablename__ = "blacklisted_tokens"
    id = Column(Integer, primary_key=True, index=True)
    token = Column(String(512), nullable=False, index=True)
    blacklisted_at = Column(DateTime, default=datetime.utcnow)


class VIPTable(Base):
    __tablename__ = "viptest"
    IDvip = Column(Integer, primary_key=True)
    code = Column(String(13), nullable=True)
    nascita = Column(String(255), nullable=True)
    cellulare = Column(String(255), nullable=True)
    sms = Column(Boolean, default=False)
    Punti = Column(Integer, nullable=True)
    Sconto = Column(Integer, nullable=True)
    Ck = Column(String(255), nullable=True)
    idata = Column(DateTime, default=func.current_timestamp())
    ioperatore = Column(Integer, nullable=True)
    inegozio = Column(Integer, nullable=True)
    P_cs = Column(Integer, default=0)
    P_ldata = Column(String(255), nullable=True)
    P_importo = Column(DECIMAL(10, 2), default="0.00")
    Nome = Column(String(255), nullable=True)
    Indirizzo = Column(String(255), nullable=True)
    Cap = Column(String(255), nullable=True)
    Citta = Column(String(255), nullable=True)
    Prov = Column(String(255), nullable=True)
    CodiceFiscale = Column(String(255), nullable=True)
    PartitaIva = Column(String(255), nullable=True)
    Email = Column(String(255), nullable=True)
    sesso = Column(Integer, default=0)
    VIPanno = Column(Integer, default=0)
    maps = Column(String(255), nullable=True)
    VIPscadenza = Column(String(255), nullable=True)
    Blocco = Column(Integer, default=0)
    cognome = Column(String(255), default="")
    SerBlocco = Column(Integer, default=0)
    SerBloccoBz = Column(String(255), default="")
    omail = Column(Boolean, default=False)
    oposte = Column(Boolean, default=False)
    msg = Column(Integer, default=0)
    msgstr = Column(String(255), default="")
    utime = Column(String(255), default="")
    upc = Column(String(255), default="")
    uzt = Column(Integer, default=0)
    un = Column(String(255), default="")
    lotteria = Column(String(20), default="")
    statoanno = Column(String(10), default="")
    img = Column(LargeBinary, nullable=True)
    n = Column(String(255), default="")
    SCOscadenza = Column(String(20), default="")


# Pydantic Models
class UserBase(BaseModel):
    userid: int
    username: str

class UserCreate(BaseModel):
    username: str = Field(..., min_length=1)  # Non-empty string
    password: str = Field(..., min_length=1)  # Non-empty string for good measure
    # No userid here; it's auto-generated by the database

class VIP(BaseModel):
    # IDvip is not required in the input; set by the endpoint
    code: Optional[str] = None
    nascita: Optional[str] = None
    cellulare: Optional[str] = None
    sms: bool = False
    Punti: Optional[int] = None
    Sconto: Optional[int] = None
    Ck: Optional[str] = None
    idata: Optional[datetime] = None
    ioperatore: Optional[int] = None
    inegozio: Optional[int] = None
    P_cs: int = 0
    P_ldata: Optional[str] = None
    P_importo: decimal.Decimal = decimal.Decimal("0.00")
    Nome: Optional[str] = None
    Indirizzo: Optional[str] = None
    Cap: Optional[str] = None
    Citta: Optional[str] = None
    Prov: Optional[str] = None
    CodiceFiscale: Optional[str] = None
    PartitaIva: Optional[str] = None
    Email: Optional[str] = None
    sesso: int = 0
    VIPanno: int = 0
    maps: Optional[str] = None
    VIPscadenza: Optional[str] = None
    Blocco: int = 0
    cognome: str = ""
    SerBlocco: int = 0
    SerBloccoBz: str = ""
    omail: bool = False
    oposte: bool = False
    msg: int = 0
    msgstr: str = ""
    utime: str = ""
    upc: str = ""
    uzt: int = 0
    un: str = ""
    lotteria: str = ""
    statoanno: str = ""
    img: Optional[bytes] = None
    n: str = ""
    SCOscadenza: str = ""

    model_config = ConfigDict(arbitrary_types_allowed=True)

